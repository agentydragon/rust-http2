use crate::actions::cargo_build;
use crate::actions::cargo_doc;
use crate::actions::cargo_test;
use crate::actions::checkout_sources;
use crate::actions::rust_install_toolchain;
use crate::actions::RustToolchain;
use crate::ghwf::Env;
use crate::ghwf::Job;
use crate::ghwf::Step;
use crate::yaml::Yaml;
use crate::yaml::YamlWriter;
use std::fs::File;
use std::io::Write;

mod actions;
mod ghwf;
mod yaml;

fn steps(channel: RustToolchain) -> Vec<Step> {
    let mut r = vec![checkout_sources(), rust_install_toolchain(channel)];
    // Use one thread for better errors
    r.push(cargo_test(
        &format!("cargo test"),
        "--all --all-targets -- --test-threads=1",
    ));
    // `--all-targets` does not include doctests
    // https://github.com/rust-lang/cargo/issues/6669
    r.push(cargo_test("cargo test --doc", "--doc"));
    r.push(cargo_doc("doc", ""));
    r
}

#[derive(PartialEq, Eq, Copy, Clone)]
struct Os {
    name: &'static str,
    ghwf: Env,
}

const LINUX: Os = Os {
    name: "linux",
    ghwf: Env::UbuntuLatest,
};
const MACOS: Os = Os {
    name: "macos",
    ghwf: Env::MacosLatest,
};

fn jobs() -> Yaml {
    let mut r = Vec::new();
    for &channel in &[
        RustToolchain::Stable,
        RustToolchain::Beta,
        RustToolchain::Nightly,
    ] {
        for &os in &[LINUX, MACOS] {
            if channel != RustToolchain::Stable && os == MACOS {
                // skip some jobs because macos is expensive
                continue;
            }
            r.push(Job {
                id: format!("{}-{}", os.name, channel),
                name: format!("{} {}", os.name, channel),
                runs_on: os.ghwf.to_owned(),
                steps: steps(channel),
            });
        }
    }

    r.push(Job {
        id: format!("h2spec"),
        name: format!("h2spec"),
        runs_on: LINUX.ghwf.to_owned(),
        steps: vec![
            checkout_sources(),
            Step::run("Install h2spec", "ci/install-h2spec.sh"),
            cargo_build("Build h2spec test", "--manifest-path h2spec-test/Cargo.toml --bin the_test"),
            Step::run(
                "Run h2spec test",
                "PATH=\"$(pwd):$PATH\" cargo run --manifest-path h2spec-test/Cargo.toml --bin the_test",
            )
        ],
    });

    Yaml::map(r.into_iter().map(Job::into))
}

fn main() {
    let yaml = Yaml::map(vec![
        ("on", Yaml::list(vec!["push", "pull_request"])),
        ("name", Yaml::string("Jobs")),
        ("jobs", jobs()),
    ]);

    let mut writer = YamlWriter::default();
    writer.write_line(&format!(
        "# @generated by {}, do not edit",
        env!("CARGO_PKG_NAME")
    ));
    writer.write_line("");
    writer.write_yaml(&yaml);
    File::create(".github/workflows/ci.yml")
        .unwrap()
        .write_all(writer.buffer.as_bytes())
        .unwrap();
}
